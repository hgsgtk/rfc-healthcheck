<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.11 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-03" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for caching, failover or circuit-breaking, are
essential to the ability of providing highly-available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. However, there is currently no standard
for the health check output response, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>Health Check Response Format for HTTP APIs uses the JSON format described in
<xref target="RFC8259"/> and has the media type “application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy (acceptable aliases: “ok” to support Node’s Terminus and
“up” for Java’s SpringBoot),</t>
  <t>“fail”: unhealthy (acceptable aliases: “error” to support Node’s Terminus and
“down” for Java’s SpringBoot), and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is case-insensitive and is tightly related with
  the HTTP response code returned by the health endpoint. For “pass” status,
  HTTP response code in the 2xx-3xx range MUST be used. For “fail” status,
  HTTP response code in the 4xx-5xx range MUST be used. In case of the “warn”
  status, endpoints MUST return HTTP status in the 2xx-3xx range, and
  additional information SHOULD be provided, utilizing optional fields of the
  response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service should not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseID” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="details" title="details">

<t>details (optional) is an object that provides more details about the status of
the service as it pertains to the information about the downstream dependencies
of the service in question. Please refer to the “The Details Object” section
for more information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-details-object" title="The Details Object">

<t>The “details” object MAY have a number of unique keyes, one for each logical
downstream dependencies or sub-components. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array should be used as the value, for
consistency.</t>

<t>The key identifying an element in the object should be a unique string within
the details section. It MAY have two parts: “{componentName}:{measurementName}”,
in which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not 
contain a colon, in the name, since colon is used as a separator.</t>
  <t>measurementName: (optional) name of the measurement type (a data point type)
that the status is reported for. MUST not contain a colon, in the name, since
colon is used as a separator. The observation’s name can be one of:
  <list style="symbols">
      <t>A pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value side of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="observedvalue" title="observedValue">

<t>observedValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="observedunit" title="observedUnit">

<t>observedUnit (optional) SHOULD be present if observedValue is present. Calrifies
the unit of measurement in which observedUnit is reported, e.g. for a time-based
value it is important to know whether the time is reported in seconds, minutes,
hours or something else. To make sure unit is denoted by a well-understood name
or an abbreviation, it should be one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
observedValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseID": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "details": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 250,
        "observedUnit": "ms",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "observedValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "observedValue": 1209600.245,
        "observedUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 8.5,
        "observedUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 5500,
        "observedUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses SHOULD be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service. Any method of cach lifetime negotiation provided by HTTP spec is
acceptable (e.g. ETags are just fine).</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAHEYflwAA+1c7XLbyJX9j6fo4vyI7ZAURUm2zP2oVWxPrOzYmrXkZLOp
VKoJNEWMQIBBA6KZKafyILsvlyfZc+7tBkFJ9kyyk61sNvkxpoDG7dv389zb
3RmNRkmTN4WbmdfOFs3SvFi69Ma8c35dld6ZL6t6ZRuzqGrz+urqa3P29blP
7Hxeu9tZklVpaVf4Nqvtohnlpc1s7fKRXeejpZAbpSQ3mhwlmW0wcDo5PE1S
/Lyu6u3M5OWiSpJ8Xc9MU7e+mU4mzyfTBETszPzUla62RbKp6pvrumrXs+TG
bfFXNjPnZePq0jWjl5w5SXxjy+w3tqhKTLJ1PlnnM/OrpkqHBv/Jy8yVzdD4
qm5qt/D4tV2FH02dp3iVVqu1DT9WGIxXeVnkpft1kti2WVb1LDGjxOB/eenB
wNi81dX65W1e5PJGhXFe25sif+A15nKumZnDw2NzAlGf3bqydfIqzRuI463b
mF9itfqoasuGQnpf5o3LzGUDsXl55VY2LyA9mehfrvnXGHzLu7bGypdNs54d
HGw2m/Gidn45L9p67mVMUopG81uHBZl3X76YHh4+Dz+Pnp8+5c8v8PtkOn0a
Hp9OT0/Dz2fTo+Pu6Qm+S6jCfYIYMwk/n54e9b48jNMcHfHL0Whk7BxCgdyT
5GqZewODail9s66rdeWdN9Z4V9/mqTNqUEYMytTRPhcP2OdYaZdV437zlv9p
qt+8czZztU+SJ0/AgXn18vzq4t3MrAtnQaV2q+rWmYY8eJc2eVWauQNRZ9bt
vMhhsXj05AnZdCb3vgVrRe51YvlMXMCklh/iaVtmBnz9IzXhoYrrvFm2c2rg
ILrJQb1Ig5vIog6U7j+PdZZVBfK1SykOJY5Z+iQjnXGgnVf3KJLWOyWRLm15
TYFiTeTc/en80TXyxh+sLD6vSfvSOWMLX0EETpn8kTdpW9ecET7ZtB7uIm/P
X119aRAELPV94+ohpk+66XsvxrlrFuOqvj6ANRx8R2SRFVLZqzzLCpckXzA0
1FXWihJVkrfg16zsN1UNLzPVAqKFLZRiK+A6v83La2ENscJs3NwglmDMPC+w
uvU6qt+b1rtErOzbb4Odf/xorOf68po2i1hTFWPDSYO5klS7bvKV48QYCGuT
GJo5yHCFAGPsLfzXYrbAHaW1Ny0erLwrbp0fY3Umyxm05i1V6LdQxcon8zYv
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
sTdNq9PTz3adj6Mb81xrNmeVdxAXH7xw0FH4+KCUtZvyHWKNVqSF1Oekczid
PIdjj6fHJ58xpR/Ckh62mXU767WVvpe1PF1kx4dP3WR0+nw6GR0fThaj5+kz
xObjZ88nk8ni2XT6rM8VpcyVfs7dvltQp5+TD9IqDzU/LKUfwNKi7IZ/KeFM
/waEs2dYK7fijY7/I7Y1/pz8fpr/5P+tYZ2cTD6X4t58SjQ/eI5LgpDuRPqB
bJ5+JsjL+wNBG2Ge/sgPcknCFQfNktdiqiID6TDxvXE9Uv3x5Cz5KBgS0PLS
pa1cK3jBfaUsHAsGMI4HdXhml1Wm+wC3zLnbyUpys3Rl6Bv0ttX6u9fmjQVe
zKvWJwDSVe1De6b14Z5Kf0uZkLmqASN5m0Yo2qaxPO3CnTc98mbDccpk75j6
7sgWtwEjs+wBYd3s4YbtYZ54K8NZZAOcGrslPMrndd8cTwVts1VwTxxX+8cy
757S3m0G7w4j3YXKcu75zY6G3rbqb+jG16gceiP6aPuJeRcOYHLrDK8bQOaZ
KQ8sXl3Es2T3X70q0yrTSxH9dc3MPC9tvcWIzhDujtATrz+WTppfQvmyN6hj
w02i0KLh1mlRSM9NbDKeTeVauIHrHBsChgdeOZ1o/ovDqbawHjw8J4ffzB4L
ckDf9/eWCM/fh4Pp72IX5bxr4KO6Y9dET7taPcEmVL9zMWz0tLxpsOOd5yZ2
vD8TOt/Jvu5c99Qo9Tn8qN7euwpCiDpUi5f9Qlp1OHPLPsmtTbexLc2mybVw
HsqScOSm251Q6bDGl34RK005eyz9m24LQ0QR7qoEGfV6CjxpyuPS5u71hk0O
VasWXJDZUC9BOj3lCsOuK5aGvmumXX11ecA683JoLs7gn1PjmpTbqud3b1fc
NcK3yAMY93U4NJztr3GmEYUKkvtWGHnWv6Wi/ZUu8ogfz8zPIXWGpyfmy9pe
a9N1t+3zOTcIW9RyQ/C5tnJ28oGXJbScjmg0xaCPXROz0vb0vpuIi+utTuEd
X4gNdjI4e9DUNAscjs1LdhRC0OPZZO3k7Q75N1LNMyrwgynj9HWehl74I/94
9+5obL7kFTIeECpZl8vbcaj6jTnmtymssPJLs+BICVo8DTMzV6/+/UpGnYzD
yZG+S8awFK7IItrqpdUZdYz36n+y551qQ2XR1tIQfWjJbz9/bRVrfPWJC6dq
eSXbmkHIL8SSKWa5NHvwQg8EhvxQuPoTE/G+QMoudOGya70SwqRh5UhVZcyb
/MaZs1VbZt7BUV7V+Y35RV7w4NDPWl4nMT+Br1R8TB98RxuBg8V/efJDb+n5
9vpaz5lpm3mBlMejL2NzVopNvbH1De9m0BCXVu7qmDnQkXRZhZDeB2Y2gAF7
46zPi62kvhe8IBUvA10yquD3nTsQWNcvmP3DLTtEsgcTsuluwsX7Z8QNFvxu
jOwiiFxunFvzlMgqLzM58dGddO4Sav+Y7xwrN0UVzJu9bMHtehJftiCpvWI7
4vkHKJ8HwrroE7o5A1BJLYNB3mgUW7pibVh8j+JZ3BiGdsfA6JevH0r4PjZb
12K3lvEwnF4PuG5otlUb0I/NQL0BjEr6Jz6Zn6QXf4Cvdo8hXz0Rvn+UT466
2gU0mfWun5nu4laANBy0CxV7OtpLUZ9cV/9UTjgDbI1cxy5Jv8gXThvebPwL
1v1MJ3Dw2Mg1W6aU3gWz3S3SZbWBZvVKFFOcyks62HKBVFctB/uooWLbHc2F
STXpMlptW+bRpV++vLgcaTc92TuXTF/h0Xm4gWyvpHIkLa6ndNdVoztTe7se
eg8AeUcP7PYugejWx6sre+13+yzc0H5M8b7AX9VqX4ka7OXQIPevYmtZtnfo
sEQEJM1z4roxxmPHEAHtJuyh7KAz1iHHEEs9gc6OPJ0Zf7erngfvX1rqYfwV
L4JIfnwQ08q1B9tHKRu75SS8nL7bevg0HmYVxFAy6Hj/h3DaNJ51Th7+ON4Z
C0aITyO81+3dudtWYQerM8ykU2TYOHuQtIgeLita5aVvvQ8sV6uL7irqsVwF
O/O6P9cW/P9XCDKrWsqMWSqa6CcE8EgnSno0H/eMuTNeRKNwZZ+7dls9vG4V
aT5SBLOhJSSyM7hhKTZ3pruPBT6/Qo7hcx4uVDYRPOX/hsHVev3veHJsHkFr
CE/IRI8JLmx3GFbGArSojKs5z5slweNhXOvtdwiUS/KyGay7oxKx2/WoqUaZ
HO/+b/M+JeitQwAA

-->

</rfc>

